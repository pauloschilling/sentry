#!/usr/bin/env python

from sentry.utils.runner import configure
configure()

from datetime import datetime, timedelta
from django.conf import settings
from pytz import utc
from random import randint

from sentry.app import tsdb
from sentry.models import (
    Activity, User, Organization, OrganizationAccessRequest,
    OrganizationMember, OrganizationMemberType, Project, Team
)
from sentry.utils.samples import create_sample_event


def create_system_time_series():
    now = datetime.utcnow().replace(tzinfo=utc)

    for _ in xrange(60):
        count = randint(1, 10)
        tsdb.incr_multi((
            (tsdb.models.internal, 'client-api.all-versions.responses.2xx'),
            (tsdb.models.internal, 'client-api.all-versions.requests'),
        ), now, int(count * 0.9))
        tsdb.incr_multi((
            (tsdb.models.internal, 'client-api.all-versions.responses.4xx'),
        ), now, int(count * 0.05))
        tsdb.incr_multi((
            (tsdb.models.internal, 'client-api.all-versions.responses.5xx'),
        ), now, int(count * 0.1))
        now = now - timedelta(seconds=1)

    for _ in xrange(24 * 30):
        count = randint(100, 1000)
        tsdb.incr_multi((
            (tsdb.models.internal, 'client-api.all-versions.responses.2xx'),
            (tsdb.models.internal, 'client-api.all-versions.requests'),
        ), now, int(count * 4.9))
        tsdb.incr_multi((
            (tsdb.models.internal, 'client-api.all-versions.responses.4xx'),
        ), now, int(count * 0.05))
        tsdb.incr_multi((
            (tsdb.models.internal, 'client-api.all-versions.responses.5xx'),
        ), now, int(count * 0.1))
        now = now - timedelta(hours=1)


def create_sample_time_series(event):
    group = event.group

    now = datetime.utcnow().replace(tzinfo=utc)

    for _ in xrange(60):
        count = randint(1, 10)
        tsdb.incr_multi((
            (tsdb.models.project, group.project.id),
            (tsdb.models.group, group.id),
        ), now, count)
        tsdb.incr_multi((
            (tsdb.models.organization_total_received, group.project.organization_id),
            (tsdb.models.project_total_received, group.project.id),
        ), now, int(count * 1.1))
        tsdb.incr_multi((
            (tsdb.models.organization_total_rejected, group.project.organization_id),
            (tsdb.models.project_total_rejected, group.project.id),
        ), now, int(count * 0.1))
        now = now - timedelta(seconds=1)

    for _ in xrange(24 * 30):
        count = randint(100, 1000)
        tsdb.incr_multi((
            (tsdb.models.project, group.project.id),
            (tsdb.models.group, group.id),
        ), now, count)
        tsdb.incr_multi((
            (tsdb.models.organization_total_received, group.project.organization_id),
            (tsdb.models.project_total_received, group.project.id),
        ), now, int(count * 1.1))
        tsdb.incr_multi((
            (tsdb.models.organization_total_rejected, group.project.organization_id),
            (tsdb.models.project_total_rejected, group.project.id),
        ), now, int(count * 0.1))
        now = now - timedelta(hours=1)


def main():
    user = User.objects.filter(is_superuser=True)[0]

    dummy_user, _ = User.objects.get_or_create(
        username='dummy@example.com',
        defaults={
            'email': 'dummy@example.com',
        }
    )
    dummy_user.set_password('dummy')
    dummy_user.save()

    mocks = (
        ('Massive Dynamic', ('Ludic Science',)),
        ('Captain Planet', ('Earth', 'Fire', 'Wind', 'Water', 'Heart')),
    )

    if settings.SENTRY_SINGLE_ORGANIZATION:
        org = Organization.get_default()
    else:
        print('Mocking org {}'.format('Default'))
        org, _ = Organization.objects.get_or_create(
            name='Default',
        )

    OrganizationMember.objects.get_or_create(
        user=user,
        organization=org,
        defaults={
            'type': OrganizationMemberType.OWNER,
            'has_global_access': True,
        }
    )

    dummy_member, _ = OrganizationMember.objects.get_or_create(
        user=dummy_user,
        organization=org,
        defaults={
            'has_global_access': False,
        }
    )
    if dummy_member.has_global_access:
        dummy_member.update(has_global_access=False)

    for team_name, project_names in mocks:
        print('> Mocking team {}'.format(team_name))
        team, _ = Team.objects.get_or_create(
            name=team_name,
            defaults={
                'organization': org,
            },
        )

        for project_name in project_names:
            print('  > Mocking project {}'.format(project_name))
            project, _ = Project.objects.get_or_create(
                team=team,
                name=project_name,
                defaults={
                    'organization': org,
                }
            )

            event1 = create_sample_event(
                project=project,
                platform='python',
                release='4f38b65c62c4565aa94bba391ff8946922a8eed4',
            )
            create_sample_time_series(event1)

            event2 = create_sample_event(
                project=project,
                platform='javascript',
                release='4f38b65c62c4565aa94bba391ff8946922a8eed4',
            )
            create_sample_time_series(event2)

            Activity.objects.create(
                type=Activity.RELEASE,
                project=project,
                ident='4f38b65c62c4565aa94bba391ff8946922a8eed4',
                user=user,
                data={'version': '4f38b65c62c4565aa94bba391ff8946922a8eed4'},
            )

            event3 = create_sample_event(project, 'java')

        OrganizationAccessRequest.objects.create_or_update(
            member=dummy_member,
            team=team,
        )

    Activity.objects.create(
        type=Activity.RELEASE,
        project=project,
        ident='4f38b65c62c4565aa94bba391ff8946922a8eed4',
        user=user,
        data={'version': '4f38b65c62c4565aa94bba391ff8946922a8eed4'},
    )

    create_system_time_series()


if __name__ == '__main__':
    from django.conf import settings
    settings.CELERY_ALWAYS_EAGER = True

    main()
